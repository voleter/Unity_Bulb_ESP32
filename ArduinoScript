// ===== ESP32-C6 Tapo Bridge (lean, full, with robust API key) =====
// Board: ESP32C6 Dev Module
// Tools -> Partition Scheme -> Huge APP (3MB No OTA/1MB SPIFFS)
// Requires the three headers from omegahiro/tapo-esp32 in your Arduino libraries:
//   tapo_device.h, tapo_protocol.h, tapo_cipher.h

#include <WiFi.h>
#include <WebServer.h>
#include "tapo_device.h"  // from tapo-esp32 headers

// ---------- CONFIG (EDIT THESE 4 LINES) ----------
const char* WIFI_SSID     = "stc_wifi_0574";
const char* WIFI_PASSWORD = "uwaxhhp7ikv";
const char* BULB_IP       = "192.168.8.105";          // set your Tapo bulb's LAN IP
const char* TAPO_EMAIL    = "voleterx@gmail.com";       // your Tapo account email
const char* TAPO_PASSWORD = "Mm00ddyy";    // your Tapo account password
// -------------------------------------------------

// You already gave me these:
const char* API_KEY = "a7b4f9e2d6c18a3f5b9d7e6c4a1b02d8"; // shared secret from Unity/cURL

WebServer server(80);
TapoDevice tapo;
bool tapoReady = false;

// Collect these headers so WebServer exposes them
const char* HEADER_KEYS[] = { "X-API-Key", "x-api-key" };
const uint8_t HEADER_COUNT = 2;

static void addCORS() {
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.sendHeader("Access-Control-Allow-Methods", "GET,POST,OPTIONS");
  server.sendHeader("Access-Control-Allow-Headers", "Content-Type, X-API-Key");
}

static void sendJSON(int code, const char* body) {
  addCORS();
  server.send(code, "application/json", body);
}

// Accept header OR query param (?api_key=...) â€“ case-insensitive
static bool checkKey() {
  // header(s)
  if (server.hasHeader("X-API-Key")) {
    String v = server.header("X-API-Key"); v.trim();
    if (v == API_KEY) return true;
  }
  if (server.hasHeader("x-api-key")) {
    String v = server.header("x-api-key"); v.trim();
    if (v == API_KEY) return true;
  }
  // query
  if (server.hasArg("api_key")) {
    String v = server.arg("api_key"); v.trim();
    if (v == API_KEY) return true;
  }
  return false;
}

// Helpers for /set?h=&s=&b=
static int qint(const char* key, int defV) {
  if (!server.hasArg(key)) return defV;
  return server.arg(key).toInt();
}

// -------- Handlers --------
void handleOptions() {
  addCORS();
  server.send(204);
}

void handleHealth() {
  sendJSON(200, "{\"ok\":true}");
}

void handleOn() {
  if (!checkKey()) { sendJSON(401, "{\"error\":\"unauthorized\"}"); return; }
  if (!tapoReady)  { sendJSON(503, "{\"error\":\"tapo not ready\"}"); return; }
  tapo.on();
  sendJSON(200, "{\"state\":\"on\"}");
}

void handleOff() {
  if (!checkKey()) { sendJSON(401, "{\"error\":\"unauthorized\"}"); return; }
  if (!tapoReady)  { sendJSON(503, "{\"error\":\"tapo not ready\"}"); return; }
  tapo.off();
  sendJSON(200, "{\"state\":\"off\"}");
}

// POST /set?h=0..360&s=0..100&b=1..100
void handleSet() {
  if (!checkKey()) { sendJSON(401, "{\"error\":\"unauthorized\"}"); return; }
  if (!tapoReady)  { sendJSON(503, "{\"error\":\"tapo not ready\"}"); return; }

  int h = qint("h", -1);
  int s = qint("s", -1);
  int b = qint("b", 80);
  if (b < 1) b = 1; if (b > 100) b = 100;

  if (h >= 0 && s >= 0) tapo.set_color(h, s);  // hue 0..360, sat 0..100 (for color bulbs)
  tapo.set_brightness(b);                      // brightness always applied

  sendJSON(200, "{\"ok\":true}");
}

// Optional: debug endpoint to see headers/args received
void handleDebug() {
  String j = "{";
  j += "\"headers\":[";
  for (uint8_t i = 0; i < server.headers(); ++i) {
    if (i) j += ",";
    j += "{\"name\":\"" + server.headerName(i) + "\",\"value\":\"" + server.header(i) + "\"}";
  }
  j += "],\"args\":[";
  for (uint8_t i = 0; i < server.args(); ++i) {
    if (i) j += ",";
    j += "{\"name\":\"" + server.argName(i) + "\",\"value\":\"" + server.arg(i) + "\"}";
  }
  j += "]}";
  addCORS();
  server.send(200, "application/json", j);
}

void setup() {
  Serial.begin(115200);
  delay(150);

  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("WiFi");
  while (WiFi.status() != WL_CONNECTED) { delay(300); Serial.print("."); }
  Serial.println();
  Serial.print("ESP32 IP: "); Serial.println(WiFi.localIP());

  // Collect our API key headers
  server.collectHeaders(HEADER_KEYS, HEADER_COUNT);

  // Init Tapo client (handles local session/crypto)
  tapo.begin(BULB_IP, TAPO_EMAIL, TAPO_PASSWORD);
  tapoReady = true;

  // Routes
  server.on("/health", HTTP_GET,  handleHealth);
  server.on("/on",     HTTP_POST, handleOn);
  server.on("/off",    HTTP_POST, handleOff);
  server.on("/set",    HTTP_POST, handleSet);
  server.on("/debug",  HTTP_GET,  handleDebug);

  server.onNotFound([](){
    if (server.method() == HTTP_OPTIONS) { handleOptions(); return; }
    addCORS();
    server.send(404, "text/plain", "not found");
  });

  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();
}
